@ 0x2000 0000 + 0x0000 5000 (20Кб)

@GNU AS – просто комментарий в котором указываем компилятор (для себя)

@ Настройки для компилятора:
.syntax unified
.thumb            @ тип используемых инструкций Thumb
.cpu cortex-m3    @ семейство микроконтроллера 

.include "../libs/stm32f10x.inc"   @ файл определений микроконтроллера

@ макрос псевдокоманды MOV32, пока просто используем, не вникая как, что и почему
.macro	MOV32 regnum,number
	MOVW \regnum,:lower16:\number
	MOVT \regnum,:upper16:\number
.endm

@ Наша программа:
.section .text

@ Таблица указателей перехода которая должная быть размещена с адреса 0x08000000
.word	0x20005000	@ Стек
.word	Reset+1	@ Адрес перехода при сбросе. 
			@ Внимание! Для корректности работы необходимо к адресу
			@ прибавить "1" - это показывает процессору что команда
			@ по адресу перехода будет в формате Thumb (а не ARM),
			@ если этого не сделать, то микроконтроллер 
			@ будет уходить в ошибку (в прерывание Hard Fault)

@ Наша программа (должна быть размещена после таблицы указателей переходов)
Reset:			

	@ включим тактирование GPIOC
	MOV32	R0, RCC_APB2ENR		    @ адрес
	MOV32   R1, RCC_APB2ENR_IOCEN	@ значение
	LDR	    R2, [R0]			    @ прочитали значение регистра
	ORR	    R1, R1, R2                       @ логическое, побитовое ИЛИ : R1= R1 ИЛИ R2
	STR	    R1, [R0]                               @ запись R1 по адресу указанному в R0

	@ установим режим GPIOC pin_13  General purpose output push-pull
	MOV32	R0, GPIOC_CRH  			@ адрес
	MOV32   R1, 0 @~(GPIO_CRH_CNF13 << GPIO_CRH_CNF13_Pos)			@ значение
	LDR   	R2, [R0]				@ прочитали значение регистра
	AND		R1, R1, R2				@ логическое, побитовое ИЛИ: R1= R1 ИЛИ R2
	STR		R1, [R0]				@ запись R1 по адресу указанному в R0
		
	@ установим режим GPIOC pin_13 на выход и скорость 50MHz
	MOV32	R0, GPIOC_CRH  			@ адрес
	MOV32   R1, GPIO_CRH_MODE13 << GPIO_CRH_MODE13_Pos			@ значение
	LDR   	R2, [R0]				@ прочитали значение регистра
	ORR	   	R1, R1, R2             	@ логическое, побитовое ИЛИ: R1= R1 ИЛИ R2
	STR		R1, [R0]               	@ запись R1 по адресу указанному в R0


BLINK_LOOP:
	@ включим светодиод
	MOV32	R0, GPIOC_BSRR  		@ адрес
	MOV32   R1, GPIO_BSRR_BS_13   	@ значение
	STR   	R1, [R0]          		@ запись R1 по адресу указанному в R0
	
	BL		DELAY   @  пауза
	
	@ выключим светодиод
	MOV32	R0, GPIOC_BSRR  		@ адрес
	MOV32   R1, GPIO_BSRR_BR_13		@ значение 1-размер поля, 16-во второе полуслово
	STR   	R1, [R0]             	@ запись R1 по адресу указанному в R0

	BL		DELAY   @  пауза	

	B		BLINK_LOOP @ делаем цикл


DELAY:
	MOV32	R2, 0x00100000 	@ повтор цикла задержки 0x0010 0000 раз.
Delay_loop:	
	SUBS	R2, R2, 1
	BNE		Delay_loop
	
	BX	LR


